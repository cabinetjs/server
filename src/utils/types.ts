import { BaseEntity } from "typeorm";

export type Fn<TArgs, TReturn> = TArgs extends never
    ? () => TReturn
    : TArgs extends any[]
    ? (...args: TArgs) => TReturn
    : (arg: TArgs) => TReturn;

export type StringKeyOf<T> = Exclude<keyof T, symbol | number>;
export type SelectOnly<T, U> = {
    [K in keyof T as T[K] extends U ? K : never]: T[K];
};

export type Nullable<T> = T | null | undefined;

export type AutoGeneratedFields = "id" | "createdAt" | "updatedAt";
export type PrimitiveType = string | number | boolean | symbol | bigint | undefined | null | Date;
export type PrimitiveTypeArray = PrimitiveType[];

export type AsRawType<T extends BaseEntity> = {
    [K in keyof T as K extends "id"
        ? K
        : K extends AutoGeneratedFields
        ? never
        : K extends keyof BaseEntity
        ? never
        : T[K] extends PrimitiveTypeArray | BaseEntity | BaseEntity[]
        ? never
        : K extends `${string}Id` | `${string}Ids`
        ? never
        : K]: T[K];
};
